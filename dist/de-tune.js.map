{"version":3,"file":"de-tune.js","sourceRoot":"","sources":["../de-tune.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\nimport { Synth, PolySynth, now } from \"tone\";\nimport type { Frequency } from \"tone/build/esm/core/type/Units\";\n\ninterface NoteMap {\n\tnote: string;\n\trange: string;\n\ttarget: string;\n\tbutton: HTMLButtonElement;\n}\n\nconst defaultRange = \"4\";\nconst defaultDuration = \"8n\";\n\n/**\n * @element de-tune\n * @summary Pass in a set of notes to get an interactive instrument tuner.\n *\n * @attr {String} notes - Space-delineated list of notes and octave ranges.\n * @attr {String} duration - Number of quarter notes each note should ring for.\n */\n@customElement(\"de-tune\")\nexport class Detune extends LitElement {\n\t/** The number of quarter notes each note should ring for. */\n\t@property({\n\t\ttype: String,\n\t\tconverter: (value) => {\n\t\t\tif (value) {\n\t\t\t\treturn `${value}n`;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t},\n\t})\n\tduration = defaultDuration;\n\n\t/** How long to wait before the next note when playing them all together. */\n\t@property({ type: Number })\n\tplayAllDelay = 0.5;\n\n\t/**\n\t * By default, the component replaces the button text with the letter of the note only.\n\t *\n\t * Set this attribute if you want the full note and range.\n\t */\n\t@property({ type: Boolean })\n\tshowFullNote = false;\n\n\t/** Tony synth processor for single notes. */\n\t@state()\n\tsynth = new Synth().toDestination();\n\n\tget buttons() {\n\t\treturn Array.from(\n\t\t\tthis.querySelectorAll(\"button:not([data-play-all])\"),\n\t\t) as HTMLButtonElement[];\n\t}\n\n\tget playAllButton() {\n\t\treturn this.querySelector(\"button[data-play-all]\") as HTMLButtonElement;\n\t}\n\n\t/** List of notes and their octave range. */\n\tget notes(): NoteMap[] {\n\t\treturn this.buttons.map((button) => {\n\t\t\tlet note = button.innerText;\n\t\t\tlet numbers = note.match(/\\d+/);\n\t\t\tif (numbers) {\n\t\t\t\tlet range = numbers[0];\n\t\t\t\tlet target = note.split(range)[0];\n\n\t\t\t\treturn {\n\t\t\t\t\tnote,\n\t\t\t\t\trange,\n\t\t\t\t\ttarget,\n\t\t\t\t\tbutton,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tnote: `${note}${defaultRange}`,\n\t\t\t\trange: defaultRange,\n\t\t\t\ttarget: note,\n\t\t\t\tbutton,\n\t\t\t};\n\t\t});\n\t}\n\n\t/** Array of all notes. */\n\tprivate get allNotes(): string[] | undefined {\n\t\treturn this.notes?.map((note) => note.note);\n\t}\n\n\t/**\n\t * Play the selected note.\n\t * @param event Click event\n\t */\n\tprivate playNote = (event: Event): void => {\n\t\tconst target = event.target as HTMLButtonElement;\n\n\t\tif (target) {\n\t\t\tthis.synth.triggerAttackRelease(target.value, this.duration);\n\t\t}\n\t};\n\n\t/** Play all notes in sequence. */\n\tprivate playAll = (): void => {\n\t\tconst poly = new PolySynth(Synth).toDestination();\n\t\tconst time = now();\n\t\tlet when = 0;\n\t\tthis.notes?.forEach((note) => {\n\t\t\tpoly.triggerAttack(note.note, time + when);\n\t\t\twhen += this.playAllDelay;\n\t\t});\n\t\tpoly.triggerRelease(this.allNotes as Frequency[], time + when + 1);\n\t};\n\n\tconnectedCallback() {\n\t\tsuper.connectedCallback();\n\n\t\tthis.notes.forEach((note) => {\n\t\t\tnote.button.value = note.note;\n\t\t\tnote.button.addEventListener(\"click\", this.playNote);\n\n\t\t\tif (!this.showFullNote) {\n\t\t\t\tnote.button.innerText = note.target;\n\t\t\t}\n\t\t});\n\n\t\tthis.playAllButton?.addEventListener(\"click\", this.playAll);\n\t}\n\n\trender(): TemplateResult {\n\t\treturn html`<slot></slot>`;\n\t}\n}\n"]}