{"version":3,"file":"de-tune.js","sourceRoot":"","sources":["../de-tune.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, TemplateResult } from 'lit'\nimport { customElement, property, state } from 'lit/decorators.js'\nimport { map } from 'lit/directives/map.js'\nimport * as Tone from 'tone'\nimport type { Frequency } from 'tone/build/esm/core/type/Units'\n\ninterface NoteMap {\n\tnote: string\n\trange: string\n\ttarget: string\n}\n\nconst defaultRange = '4'\nconst defaultDuration = '8n'\n\n/**\n * @element de-tune\n * @summary Pass in a set of notes to get an interactive instrument tuner.\n *\n * @attr {String} notes - Space-delineated list of notes and octave ranges.\n * @attr {String} duration - Number of quarter notes each note should ring for.\n */\n@customElement('de-tune')\nexport class Detune extends LitElement {\n\t/** The number of quarter notes each note should ring for. */\n\t@property({\n\t\ttype: String,\n\t\tconverter: (value) => {\n\t\t\tif (value) {\n\t\t\t\treturn `${value}n`\n\t\t\t}\n\t\t\treturn undefined\n\t\t},\n\t})\n\tduration = defaultDuration\n\n\t/** Tony synth processor for single notes. */\n\t@state()\n\tsynth = new Tone.Synth().toDestination()\n\n\tget buttons() {\n\t\treturn Array.from(this.querySelectorAll('button:not([data-play-all])'))\n\t}\n\n\tget playAllButton() {\n\t\treturn this.querySelector('[data-play-all]')\n\t}\n\n\t/** List of notes and their octave range. */\n\tget notes(): NoteMap[] {\n    return this.buttons.map((button) => {\n      let note = (button as HTMLButtonElement).innerText;\n      let numbers = note.match(/\\d+/);\n\t\t\tif (numbers) {\n\t\t\t\tlet range = numbers[0]\n\t\t\t\tlet target = note.split(range)[0]\n\n\t\t\t\treturn {\n\t\t\t\t\tnote,\n\t\t\t\t\trange,\n\t\t\t\t\ttarget,\n          button,\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tnote: `${note}${defaultRange}`,\n\t\t\t\trange: defaultRange,\n\t\t\t\ttarget: note,\n        button,\n\t\t\t}\n    })\n\t}\n\n\t/** Array of all notes. */\n\tprivate get allNotes(): string[] | undefined {\n\t\treturn this.notes?.map((note) => note.note)\n\t}\n\n\t/**\n\t * Play the selected note.\n\t * @param event Click event\n\t */\n\tprivate playNote(event: Event): void {\n\t\tconst target = event.target as HTMLButtonElement\n\n\t\tif (target) {\n\t\t\tthis.synth.triggerAttackRelease(target.value, this.duration)\n\t\t}\n\t}\n\n\t/** Play all notes in sequence. */\n\tprivate playAll(): void {\n\t\tconst poly = new Tone.PolySynth(Tone.Synth).toDestination()\n\t\tconst time = Tone.now()\n\t\tlet when = 0\n\t\tthis.notes?.forEach((note) => {\n\t\t\tpoly.triggerAttack(note.note, time + when)\n\t\t\twhen += 0.5\n\t\t})\n\t\tpoly.triggerRelease(this.allNotes as Frequency[], time + when + 1)\n\t}\n\nconnectedCallback() {\n    super.connectedCallback();\n\n    console.log(this.notes);\n    // todo iterate over each note and add button values and event listeners\n  }\n\n\trender(): TemplateResult {\n\t\treturn html`<slot></slot>`\n\n\t\treturn html`<div class=\"detune__notes\">\n\t\t\t\t${map(\n\t\t\t\t\tthis.notes,\n\t\t\t\t\t(note) =>\n\t\t\t\t\t\thtml`<button\n\t\t\t\t\t\t\tclass=\"detune__note\"\n\t\t\t\t\t\t\tvalue=${note.note}\n\t\t\t\t\t\t\t@click=${this.playNote}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t${note.target}\n\t\t\t\t\t\t</button>`,\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<button class=\"detune__playAll\" @click=${this.playAll}>Play All</button>`\n\t}\n}\n"]}